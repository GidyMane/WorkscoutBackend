generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                      String                  @id @default(auto()) @map("_id") @db.ObjectId
  email                   String                  @unique
  password                String
  role                    Role
  profile                 Profile?
  jobApplicationDataStore JobApplicationDataStore?
  subscription            Subscription?
  payments                Payment[]
  userNotifications       UserNotification[]
}

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  account   Account  @relation(fields: [accountId], references: [id])
  accountId String   @unique
  name      String
  bio       String?
  documents String[] // URLs or paths to uploaded CVs/resumes
}

model JobApplicationDataStore {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  account   Account  @relation(fields: [accountId], references: [id])
  accountId String   @unique
  jobs      Job[]
}

model Job {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  jobApplicationStore  JobApplicationDataStore @relation(fields: [jobAppDataStoreId], references: [id])
  jobAppDataStoreId    String
  title                String
  company              String
  link                 String
  status               JobStatus // e.g. APPLIED, SHORTLISTED, HIRED
  dateApplied          DateTime @default(now())
}

model Payment {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  account         Account      @relation(fields: [accountId], references: [id])
  accountId       String
  amount          Float
  date            DateTime     @default(now())
  subscriptionId  String?
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id])
}

model Subscription {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  account     Account    @relation(fields: [accountId], references: [id])
  accountId   String     @unique
  planId      String
  plan        Plan       @relation(fields: [planId], references: [id])
  invoice     Invoice?
  payments    Payment[]
  active      Boolean    @default(true)
  startedAt   DateTime   @default(now())
  expiresAt   DateTime
}

model Plan {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  durationInDays Int
  subscriptions Subscription[]
}

model Invoice {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  subscription    Subscription  @relation(fields: [subscriptionId], references: [id])
  subscriptionId  String        @unique
  issueDate       DateTime      @default(now())
  amountDue       Float
  isPaid          Boolean       @default(false)
}

model Notification {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  message           String
  createdAt         DateTime          @default(now())
  userNotifications UserNotification[]
}

model UserNotification {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  notification   Notification  @relation(fields: [notificationId], references: [id])
  notificationId String
  account        Account       @relation(fields: [accountId], references: [id])
  accountId      String
  read           Boolean       @default(false)
  receivedAt     DateTime      @default(now())
}

enum Role {
  CLIENT
  WORKSCOUT
  ADMIN
}

enum JobStatus {
  APPLIED
  SHORTLISTED
  HIRED
  REJECTED
}
